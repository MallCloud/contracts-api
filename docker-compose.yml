version: '3'

services:

  # Nginx web server acting as a reverse proxy for "web" and "api" services
  nginx:
    image: nginx:1.13.3-alpine
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/log/nginx
      - /var/run
    depends_on:
      - api
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./config/nginx-snippets:/etc/nginx/snippets:ro
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro

  # Data API and authentication/authorization
  api:
    build: ./docker/api
    depends_on:
      - db
      - redis
    environment:
      - CORS_ORIGIN=http://localhost:3001,http://localhost:3000
      - DATABASE_URL=postgres://postgres@db:5432/dev
      - DATABASE_DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - SESSION_SECRET=wZjwhFtzQsd7r87W6AZw45Sm
      - FACEBOOK_ID=1821424564802638
      - FACEBOOK_SECRET=2339bdf25f236a42fc3a18280bf455e8
      - GOOGLE_ID=xxxxx.apps.googleusercontent.com
      - GOOGLE_SECRET=xxxxx
      - TWITTER_KEY=xxxxx
      - TWITTER_SECRET=xxxxx
    ports:
      - "127.0.0.1:9229:9229" # V8 inspector for tools/run.js
      - "127.0.0.1:9230:9230" # V8 inspector for src/server.js
    volumes:
      - yarn:/root/.cache/yarn
      - ./:/usr/src/app
    command: sh /start-up.sh # or, `node --inspect=0.0.0.0:9229 tools/run.js`

  # SQL and document data store
  db:
    image: postgres:9.6.4-alpine
    read_only: true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    volumes:
      - db:/var/lib/postgresql/data
      - ./config/postgres-initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
    # ports:
    #   - "127.0.0.1:5432:5432"

  # Distributed in-memory cache
  redis:
    image: redis:4.0.1-alpine
    read_only: true
    volumes:
      - redis:/data
    user: redis

  bootstrap:
    build: ./docker/monitored-geth-client
    restart: on-failure
    container_name: bootstrap
    hostname: bootstrap
    links:
      - netstats
    entrypoint: /root/start.sh
    command: '--datadir=~/.ethereum/devchain --nodekeyhex=091bd6067cb4612df85d9c1ff85cc47f259ced4d4cd99816b14f35650f59c322 --rpcapi "db,personal,eth,net,web3" --rpccorsdomain="*" --networkid=456719 --rpc --rpcaddr="0.0.0.0"'
    volumes:
      - ./docker/files/password:/root/files/password:ro
      - ./docker/files/genesis.json:/root/files/genesis.json:ro
      - ./docker/files/keystore:/root/.ethereum/devchain/keystore:rw
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "30304:30304"
      - "30304:30304/udp"
      - "9000:9000"

  eth:
    build: ./docker/monitored-geth-client
    restart: on-failure
    links:
      - bootstrap
      - netstats
    entrypoint: /root/start.sh
    volumes:
      - ./docker/files/password:/root/files/password:ro
      - ./docker/files/genesis.json:/root/files/genesis.json:ro
      - ./docker/files/keystore:/root/.ethereum/devchain/keystore:rw
      - /etc/localtime:/etc/localtime:ro
    command: '--datadir=~/.ethereum/devchain --rpccorsdomain="*" --networkid=456719 --rpc --bootnodes="enode://288b97262895b1c7ec61cf314c2e2004407d0a5dc77566877aad1f2a36659c8b698f4b56fd06c4a0c0bf007b4cfb3e7122d907da3b005fa90e724441902eb19e@XXX:30303"'

  netstats:
    build: eth-netstats
    restart: on-failure
    container_name: netstats
    environment:
      - WS_SECRET=eth-net-stats-secret
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "3000:3000"

volumes:
  db:
  redis:
  yarn:
  bootstrap:
  eth:
  netstats:
