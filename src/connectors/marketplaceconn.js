// web3 is an Ethereum client library
import Web3 from 'web3';
const web3 = new Web3();

/*
 *  DataMarketplace API.
 */

var MarketplaceConnectionInstance = {
    /**
     * Connect to the Marketplace contract.
     */
    ConnectToMarketplaceContract: function (url='http://localhost:8545') {
        try {
            web3.setProvider(new web3.providers.HttpProvider(url));

            // This file is generated by the Solidity compiler to easily interact with
            // the contract using the web3 library.
            const marketplaceAbi = require('../contracts/DatasetMarketplace.json').abi;
            const MarketplaceConnector = web3.eth.contract(marketplaceAbi);
        }

        catch (e) {
            console.error("Could not connect to marketplace contract. Error: ", ex);
        }

        finally {
            // cleanup
        }
    },

    /**
     * Create a DataMarketplace contract.
     *
     * @return true if creation succeded and false if not.
     */
    CreateMarketplace: function ()
    {
        try
        {
            var DataMarketplaceContract = web3.eth.contract(DataMarketplaceAbi);
            DataMarketplaceContractInstance = new DataMarketplaceContract();
            return true;
        }
        catch (ex)
        {
            console.error("Could not create data marketplace contract. Error: ", ex);
            return false;
        }
    },

    /**
     * Adds a business environment to the DataMarketplace contract.
     *
     * @param businessEnvironmentAddress address of business environment.
     *
     * @return true if process succeded and false if not.
     */
    AddBusinessEnvironment: function (businessEnvironmentAddress)
    {
        try
        {
            DataMarketplaceContractInstance.AddBusinessEnvironmentToMarketplace(businessEnvironmentAddress, { value: 200, gas: 2000 });
            return true;
        }
        catch (ex)
        {
            console.error("Could not add business environment to marketplace contract. Error: ", ex);
            return false;
        }
    },

    /**
     * Retrives the DataMarketplace contract location.
     *
     * @return true if process succeded and false if not.
     * Logs on screen the information about the contract creation, including its address.
     */
    RetrieveDataMarketplaceLocation: function ()
    {
        try
        {
            var receipt = web3.eth.getTransactionReceipt(DataMarketplaceContractInstance);
            console.log(receipt);
            return true;
        }
        catch (ex)
        {
            console.error("Could not retrieve marketplace contract location. Error: ", ex);
            return false;
        }
    },


};

export default MarketplaceConnectionInstance;
