// web3 is an Ethereum client library
import Web3 from 'web3';
const web3 = new Web3();

/*
 *  Dataset API.
 */
var DatasetConnectionInstance = {
    /**
     * Connect to the Dataset contract.
     */
    ConnectToDatasetContract: function (url='http://localhost:8545') {
        try {
            web3.setProvider(new web3.providers.HttpProvider(url));

            // This file is generated by the Solidity compiler to easily interact with
            // the contract using the web3 library.
            const datasetAbi = require('../contracts/Dataset.json').abi;
            const DatasetConnector = web3.eth.contract(datasetAbi);
        }

        catch (e) {
            console.error("Could not connect to dataset contract. Error: ", ex);
        }

        finally {
            // cleanup
        }
    },

    /**
     * Create a Dataset contract.
     *
     * @param sellerAddress Address as 32 bytes hexadecimal string starting 0x
     *
     * @param uniqueKey Unique key as 32 bytes hexadecimal string starting 0x
     *
     * @param name Dataset name as string
     *
     * @param price Dataset price as integer
     *
     * @param usageFee Dataset usage fee as integer
     *
     * @return true if creation succeded and false if not.
     */
    CreateDataset: function (sellerAddress, uniqueKey, name, price, usageFee) {
        try {
            var DatasetContract = web3.eth.contract(DatasetAbi);
            DatasetContractInstance = new DatasetContract(sellerAddress, uniqueKey, name, price, usageFee);
            return true;
        }
        catch (ex) {
            console.error("Could not create dataset contract. Error: ", ex);
            return false;
        }
    },

    /**
     * Retrives the Dataset contract location.
     *
     * @return true if process succeded and false if not.
     * Logs on screen the information about the contract creation, including its address.
     */
    RetrieveDataMarketplaceLocation: function () {
        try {
            var receipt = web3.eth.getTransactionReceipt(DatasetContractInstance);
            console.log(receipt);
            return true;
        }
        catch (ex) {
            console.error("Could not retrieve dataset contract location. Error: ", ex);
            return false;
        }
    },

};

export default DatasetConnectionInstance;
